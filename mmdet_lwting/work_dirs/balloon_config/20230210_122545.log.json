{"env_info": "sys.platform: linux\nPython: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090\nCUDA_HOME: /data/apps/cuda/11.1\nNVCC: Cuda compilation tools, release 11.1, V11.1.74\nGCC: gcc (GCC) 7.3.0\nPyTorch: 1.10.0+cu111\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.0+cu111\nOpenCV: 4.7.0\nMMCV: 1.7.1\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.1\nMMDetection: 2.28.1+", "config": "model = dict(\n    type='MaskRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=1,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        '/HOME/scz0aqk/run/mmdetection_work/data/balloon/annotations/train_coco.json',\n        img_prefix='/HOME/scz0aqk/run/mmdetection_work/data/balloon/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ],\n        classes=('balloon', )),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        '/HOME/scz0aqk/run/mmdetection_work/data/balloon/annotations/val_coco.json',\n        img_prefix='/HOME/scz0aqk/run/mmdetection_work/data/balloon/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )),\n    test=dict(\n        type='CocoDataset',\n        ann_file=\n        '/HOME/scz0aqk/run/mmdetection_work/data/balloon/annotations/val_coco.json',\n        img_prefix='/HOME/scz0aqk/run/mmdetection_work/data/balloon/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )))\nevaluation = dict(metric=['bbox', 'segm'])\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '/HOME/scz0aqk/run/mmdetection_work/mask_rcnn_r50_fpn_1x_coco_20200205-d4b0c5d6.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nclasses = ('balloon', )\nwork_dir = './work_dirs/balloon_config'\nauto_resume = False\ngpu_ids = range(0, 1)\n", "seed": 324137516, "exp_name": "balloon_config.py"}
{"mode": "val", "epoch": 1, "iter": 13, "lr": 0.00122, "bbox_mAP": 0.6304, "bbox_mAP_50": 0.8393, "bbox_mAP_75": 0.796, "bbox_mAP_s": 0.0227, "bbox_mAP_m": 0.6373, "bbox_mAP_l": 0.6669, "bbox_mAP_copypaste": "0.6304 0.8393 0.7960 0.0227 0.6373 0.6669", "segm_mAP": 0.7516, "segm_mAP_50": 0.8382, "segm_mAP_75": 0.8315, "segm_mAP_s": 0.0149, "segm_mAP_m": 0.6747, "segm_mAP_l": 0.8107, "segm_mAP_copypaste": "0.7516 0.8382 0.8315 0.0149 0.6747 0.8107"}
{"mode": "val", "epoch": 2, "iter": 13, "lr": 0.00246, "bbox_mAP": 0.7012, "bbox_mAP_50": 0.8891, "bbox_mAP_75": 0.8398, "bbox_mAP_s": 0.0303, "bbox_mAP_m": 0.6605, "bbox_mAP_l": 0.7404, "bbox_mAP_copypaste": "0.7012 0.8891 0.8398 0.0303 0.6605 0.7404", "segm_mAP": 0.7661, "segm_mAP_50": 0.8636, "segm_mAP_75": 0.8475, "segm_mAP_s": 0.0433, "segm_mAP_m": 0.6494, "segm_mAP_l": 0.8253, "segm_mAP_copypaste": "0.7661 0.8636 0.8475 0.0433 0.6494 0.8253"}
{"mode": "val", "epoch": 3, "iter": 13, "lr": 0.0037, "bbox_mAP": 0.7013, "bbox_mAP_50": 0.9132, "bbox_mAP_75": 0.8865, "bbox_mAP_s": 0.0505, "bbox_mAP_m": 0.67, "bbox_mAP_l": 0.7464, "bbox_mAP_copypaste": "0.7013 0.9132 0.8865 0.0505 0.6700 0.7464", "segm_mAP": 0.7565, "segm_mAP_50": 0.9038, "segm_mAP_75": 0.8778, "segm_mAP_s": 0.0673, "segm_mAP_m": 0.6504, "segm_mAP_l": 0.8283, "segm_mAP_copypaste": "0.7565 0.9038 0.8778 0.0673 0.6504 0.8283"}
{"mode": "val", "epoch": 4, "iter": 13, "lr": 0.00494, "bbox_mAP": 0.7273, "bbox_mAP_50": 0.869, "bbox_mAP_75": 0.8568, "bbox_mAP_s": 0.1515, "bbox_mAP_m": 0.6491, "bbox_mAP_l": 0.7839, "bbox_mAP_copypaste": "0.7273 0.8690 0.8568 0.1515 0.6491 0.7839", "segm_mAP": 0.7563, "segm_mAP_50": 0.8492, "segm_mAP_75": 0.8492, "segm_mAP_s": 0.1515, "segm_mAP_m": 0.5924, "segm_mAP_l": 0.8328, "segm_mAP_copypaste": "0.7563 0.8492 0.8492 0.1515 0.5924 0.8328"}
{"mode": "val", "epoch": 5, "iter": 13, "lr": 0.00617, "bbox_mAP": 0.6756, "bbox_mAP_50": 0.8501, "bbox_mAP_75": 0.8501, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.5892, "bbox_mAP_l": 0.7359, "bbox_mAP_copypaste": "0.6756 0.8501 0.8501 0.0000 0.5892 0.7359", "segm_mAP": 0.7409, "segm_mAP_50": 0.8501, "segm_mAP_75": 0.8245, "segm_mAP_s": 0.0, "segm_mAP_m": 0.5962, "segm_mAP_l": 0.8122, "segm_mAP_copypaste": "0.7409 0.8501 0.8245 0.0000 0.5962 0.8122"}
{"mode": "val", "epoch": 6, "iter": 13, "lr": 0.00741, "bbox_mAP": 0.6786, "bbox_mAP_50": 0.8552, "bbox_mAP_75": 0.7854, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.6273, "bbox_mAP_l": 0.7301, "bbox_mAP_copypaste": "0.6786 0.8552 0.7854 0.0000 0.6273 0.7301", "segm_mAP": 0.7251, "segm_mAP_50": 0.8329, "segm_mAP_75": 0.8177, "segm_mAP_s": 0.3535, "segm_mAP_m": 0.5762, "segm_mAP_l": 0.7934, "segm_mAP_copypaste": "0.7251 0.8329 0.8177 0.3535 0.5762 0.7934"}
{"mode": "val", "epoch": 7, "iter": 13, "lr": 0.00865, "bbox_mAP": 0.7096, "bbox_mAP_50": 0.8723, "bbox_mAP_75": 0.8479, "bbox_mAP_s": 0.101, "bbox_mAP_m": 0.4981, "bbox_mAP_l": 0.7789, "bbox_mAP_copypaste": "0.7096 0.8723 0.8479 0.1010 0.4981 0.7789", "segm_mAP": 0.7635, "segm_mAP_50": 0.8597, "segm_mAP_75": 0.8597, "segm_mAP_s": 0.1515, "segm_mAP_m": 0.4744, "segm_mAP_l": 0.8527, "segm_mAP_copypaste": "0.7635 0.8597 0.8597 0.1515 0.4744 0.8527"}
{"mode": "val", "epoch": 8, "iter": 13, "lr": 0.00989, "bbox_mAP": 0.655, "bbox_mAP_50": 0.8455, "bbox_mAP_75": 0.779, "bbox_mAP_s": 0.2525, "bbox_mAP_m": 0.4908, "bbox_mAP_l": 0.7259, "bbox_mAP_copypaste": "0.6550 0.8455 0.7790 0.2525 0.4908 0.7259", "segm_mAP": 0.7273, "segm_mAP_50": 0.8257, "segm_mAP_75": 0.7979, "segm_mAP_s": 0.303, "segm_mAP_m": 0.5764, "segm_mAP_l": 0.7925, "segm_mAP_copypaste": "0.7273 0.8257 0.7979 0.3030 0.5764 0.7925"}
{"mode": "val", "epoch": 9, "iter": 13, "lr": 0.00111, "bbox_mAP": 0.6798, "bbox_mAP_50": 0.8256, "bbox_mAP_75": 0.8071, "bbox_mAP_s": 0.1515, "bbox_mAP_m": 0.5075, "bbox_mAP_l": 0.7584, "bbox_mAP_copypaste": "0.6798 0.8256 0.8071 0.1515 0.5075 0.7584", "segm_mAP": 0.7229, "segm_mAP_50": 0.8054, "segm_mAP_75": 0.7701, "segm_mAP_s": 0.3535, "segm_mAP_m": 0.5485, "segm_mAP_l": 0.7909, "segm_mAP_copypaste": "0.7229 0.8054 0.7701 0.3535 0.5485 0.7909"}
{"mode": "val", "epoch": 10, "iter": 13, "lr": 0.00124, "bbox_mAP": 0.6762, "bbox_mAP_50": 0.827, "bbox_mAP_75": 0.8087, "bbox_mAP_s": 0.0505, "bbox_mAP_m": 0.51, "bbox_mAP_l": 0.7583, "bbox_mAP_copypaste": "0.6762 0.8270 0.8087 0.0505 0.5100 0.7583", "segm_mAP": 0.7308, "segm_mAP_50": 0.8052, "segm_mAP_75": 0.7831, "segm_mAP_s": 0.2525, "segm_mAP_m": 0.5746, "segm_mAP_l": 0.7969, "segm_mAP_copypaste": "0.7308 0.8052 0.7831 0.2525 0.5746 0.7969"}
{"mode": "val", "epoch": 11, "iter": 13, "lr": 0.00136, "bbox_mAP": 0.6839, "bbox_mAP_50": 0.8258, "bbox_mAP_75": 0.8091, "bbox_mAP_s": 0.0505, "bbox_mAP_m": 0.535, "bbox_mAP_l": 0.7584, "bbox_mAP_copypaste": "0.6839 0.8258 0.8091 0.0505 0.5350 0.7584", "segm_mAP": 0.7337, "segm_mAP_50": 0.8042, "segm_mAP_75": 0.8042, "segm_mAP_s": 0.303, "segm_mAP_m": 0.5388, "segm_mAP_l": 0.8058, "segm_mAP_copypaste": "0.7337 0.8042 0.8042 0.3030 0.5388 0.8058"}
{"mode": "val", "epoch": 12, "iter": 13, "lr": 0.00015, "bbox_mAP": 0.6808, "bbox_mAP_50": 0.8261, "bbox_mAP_75": 0.8086, "bbox_mAP_s": 0.1515, "bbox_mAP_m": 0.5583, "bbox_mAP_l": 0.7479, "bbox_mAP_copypaste": "0.6808 0.8261 0.8086 0.1515 0.5583 0.7479", "segm_mAP": 0.7326, "segm_mAP_50": 0.8039, "segm_mAP_75": 0.8039, "segm_mAP_s": 0.303, "segm_mAP_m": 0.5527, "segm_mAP_l": 0.8009, "segm_mAP_copypaste": "0.7326 0.8039 0.8039 0.3030 0.5527 0.8009"}
